generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agent {
  AgentId              Int                    @id @default(autoincrement())
  AwsId                String?                @db.VarChar(191)
  UserRoleId           Int?
  userrole             userrole?              @relation(fields: [UserRoleId], references: [UserRoleID], onDelete: Restrict, onUpdate: Restrict, map: "agent_ibfk_1")
  customer             customer[]
  customerauditlogs    customerauditlogs[]
  formvisibilitystatus formvisibilitystatus[]
  note                 note[]
  transactionagent     transactionagent[]

  @@index([UserRoleId], map: "UserRoleId")
}

model basecountry {
  BaseCountryID   Int             @id @default(autoincrement())
  BaseCountryName String          @unique(map: "BaseCountryName") @db.VarChar(191)
  exchangerates   exchangerates[]
  fundraiser      fundraiser[]
}

model currency {
  CurrencyId                    Int                             @id @default(autoincrement())
  CurrencyCode                  String?                         @db.VarChar(10)
  exchangerates                 exchangerates[]
  fundraiser_acceptedcurrencies fundraiser_acceptedcurrencies[]
  minimumamount                 minimumamount[]
  wallet                        wallet[]
}

model customer {
  CustomerId        Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(191)
  Email             String?             @db.VarChar(191)
  ManyChatId        String?             @db.VarChar(191)
  ExpireDate        DateTime?           @db.Date
  UserCountry       String?             @db.VarChar(191)
  ContactLink       String?             @db.VarChar(191)
  AgentId           Int?
  CardID            Int?
  agent             agent?              @relation(fields: [AgentId], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "customer_ibfk_1")
  customerauditlogs customerauditlogs[]
  manychat          manychat[]
  transactions      transactions[]

  @@index([AgentId], map: "AgentId")
}

model customerauditlogs {
  LogId        Int                            @id @default(autoincrement())
  AgentId      Int
  FieldChanged customerauditlogs_FieldChanged
  OldValue     String?                        @db.VarChar(191)
  NewValue     String?                        @db.VarChar(191)
  CustomerId   Int
  ChangeDate   DateTime                       @default(now()) @db.Timestamp(0)
  agent        agent                          @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "fk_agent")
  customer     customer                       @relation(fields: [CustomerId], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "fk_customer")

  @@index([AgentId], map: "fk_agent")
  @@index([CustomerId], map: "fk_customer")
}

model exchangerates {
  ExchangeRateId Int         @id @default(autoincrement())
  BaseCountryId  Int
  CurrencyId     Int
  ExchangeRate   Decimal     @db.Decimal(12, 5)
  CreateAt       DateTime    @default(now()) @db.Timestamp(0)
  UpdatedAt      DateTime    @default(now()) @db.Timestamp(0)
  basecountry    basecountry @relation(fields: [BaseCountryId], references: [BaseCountryID], onDelete: Cascade, onUpdate: Restrict, map: "fk_basecountry")
  currency       currency    @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "fk_currency")

  @@index([BaseCountryId], map: "fk_basecountry")
  @@index([CurrencyId], map: "fk_currency")
}

model formstatus {
  FormStatusID        Int                @id @default(autoincrement())
  TransactionID       Int?
  TransactionStatusID Int?
  transactions        transactions?      @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "formstatus_ibfk_1")
  transactionstatus   transactionstatus? @relation(fields: [TransactionStatusID], references: [TransactionStatusID], onDelete: Restrict, onUpdate: Restrict, map: "formstatus_ibfk_2")

  @@index([TransactionID], map: "TransactionID")
  @@index([TransactionStatusID], map: "TransactionStatusID")
}

model formvisibilitystatus {
  VisibilityStatusId Int      @id @default(autoincrement())
  AgentId            Int
  IsFormOpen         Boolean
  FormTimeStamp      DateTime @default(now()) @db.Timestamp(0)
  agent              agent    @relation(fields: [AgentId], references: [AgentId], onDelete: Cascade, onUpdate: Restrict, map: "formvisibilitystatus_ibfk_1")

  @@index([AgentId], map: "AgentId")
}

model fundraiser {
  FundraiserID                  Int                             @id @default(autoincrement())
  FundraiserName                String                          @db.VarChar(191)
  FundraiserEmail               String                          @unique(map: "FundraiserEmail") @db.VarChar(191)
  FundraiserLogo                String?                         @db.VarChar(191)
  BaseCountryID                 Int?
  FundraiserCentralID           Int?
  basecountry                   basecountry?                    @relation(fields: [BaseCountryID], references: [BaseCountryID], onUpdate: Restrict, map: "fundraiser_ibfk_1")
  fundraiser_acceptedcurrencies fundraiser_acceptedcurrencies[]
  fundraiser_contactlinks       fundraiser_contactlinks[]

  @@index([BaseCountryID], map: "BaseCountryID")
}

model fundraiser_acceptedcurrencies {
  FundraiserAcceptedCurrencyID Int         @id @default(autoincrement())
  FundraiserID                 Int?
  CurrencyID                   Int?
  fundraiser                   fundraiser? @relation(fields: [FundraiserID], references: [FundraiserID], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_acceptedcurrencies_ibfk_1")
  currency                     currency?   @relation(fields: [CurrencyID], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_acceptedcurrencies_ibfk_2")

  @@index([CurrencyID], map: "CurrencyID")
  @@index([FundraiserID], map: "FundraiserID")
}

model fundraiser_contactlinks {
  ContactID    Int         @id @default(autoincrement())
  FundraiserID Int?
  Platform     Int?
  ContactURL   String      @db.VarChar(191)
  fundraiser   fundraiser? @relation(fields: [FundraiserID], references: [FundraiserID], onDelete: Cascade, onUpdate: Restrict, map: "fundraiser_contactlinks_ibfk_1")

  @@index([FundraiserID], map: "FundraiserID")
}

model manychat {
  ManyChatId     Int      @id @default(autoincrement())
  ConversationId String   @db.VarChar(191)
  CustomerId     Int
  CreateAt       DateTime @default(now()) @db.Timestamp(0)
  UpdateAt       DateTime @default(now()) @db.Timestamp(0)
  customer       customer @relation(fields: [CustomerId], references: [CustomerId], onDelete: Cascade, onUpdate: Restrict, map: "fk_manychat_customer")

  @@index([CustomerId], map: "fk_manychat_customer")
}

model minimumamount {
  MinimumAmountId Int      @id @default(autoincrement())
  CurrencyId      Int
  Amount          Decimal  @db.Decimal(12, 2)
  CreateAt        DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt       DateTime @default(now()) @db.Timestamp(0)
  currency        currency @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Cascade, onUpdate: Restrict, map: "minimumamount_ibfk_1")

  @@index([CurrencyId], map: "CurrencyId")
}

model note {
  NoteID       Int            @id @default(autoincrement())
  Note         String?        @db.VarChar(191)
  Date         DateTime?      @db.Date
  AgentID      Int?
  agent        agent?         @relation(fields: [AgentID], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "note_ibfk_1")
  transactions transactions[]

  @@index([AgentID], map: "AgentID")
}

model platform {
  PlatformID   Int    @id @default(autoincrement())
  PlatformName String @unique(map: "PlatformName") @db.VarChar(100)
}

model screenshot {
  ScreenShotID   Int           @id @default(autoincrement())
  TransactionID  Int?
  ScreenShotLink String?       @db.VarChar(191)
  transactions   transactions? @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "screenshot_ibfk_1")

  @@index([TransactionID], map: "TransactionID")
}

model supportregion {
  SupportRegionID Int            @id @default(autoincrement())
  Region          String?        @db.VarChar(191)
  transactions    transactions[]
}

model transactionagent {
  TransactionAgentID Int           @id @default(autoincrement())
  TransactionID      Int?
  AgentID            Int?
  LogDate            DateTime      @default(now()) @db.Timestamp(0)
  transactions       transactions? @relation(fields: [TransactionID], references: [TransactionID], onDelete: Restrict, onUpdate: Restrict, map: "transactionagent_ibfk_1")
  agent              agent?        @relation(fields: [AgentID], references: [AgentId], onDelete: Restrict, onUpdate: Restrict, map: "transactionagent_ibfk_2")

  @@index([AgentID], map: "AgentID")
  @@index([TransactionID], map: "TransactionID")
}

model transactions {
  TransactionID    Int                @id @default(autoincrement())
  CustomerID       Int?
  SupportRegionID  Int?
  WalletID         Int?
  Amount           Float?             @db.Float
  PaymentCheck     Boolean?
  PaymentCheckTime DateTime           @default(now()) @db.Timestamp(0)
  NoteID           Int?
  TransactionDate  DateTime           @default(now()) @db.Timestamp(0)
  PaymentDenied    Boolean?
  Month            Int?
  HopeFuelID       Int?
  formstatus       formstatus[]
  screenshot       screenshot[]
  transactionagent transactionagent[]
  customer         customer?          @relation(fields: [CustomerID], references: [CustomerId], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_1")
  supportregion    supportregion?     @relation(fields: [SupportRegionID], references: [SupportRegionID], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_2")
  wallet           wallet?            @relation(fields: [WalletID], references: [WalletId], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_3")
  note             note?              @relation(fields: [NoteID], references: [NoteID], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_4")

  @@index([CustomerID], map: "CustomerID")
  @@index([NoteID], map: "NoteID")
  @@index([SupportRegionID], map: "SupportRegionID")
  @@index([WalletID], map: "WalletID")
}

model transactionstatus {
  TransactionStatusID Int          @id @default(autoincrement())
  TransactionStatus   String       @db.VarChar(191)
  formstatus          formstatus[]
}

model userrole {
  UserRoleID Int     @id @default(autoincrement())
  UserRole   String? @db.VarChar(191)
  agent      agent[]
}

model wallet {
  WalletId     Int            @id @default(autoincrement())
  CurrencyId   Int?
  WalletName   String?        @db.VarChar(191)
  transactions transactions[]
  currency     currency?      @relation(fields: [CurrencyId], references: [CurrencyId], onDelete: Restrict, onUpdate: Restrict, map: "wallet_ibfk_1")

  @@index([CurrencyId], map: "CurrencyId")
}

model testing_new_table {
  Id        Int      @id @default(autoincrement())
  Name      String   @db.VarChar(191)
  CreatedAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
}

model testing_new_table2 {
  Id        Int      @id @default(autoincrement())
  Name      String   @db.VarChar(191)
  CreatedAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
}

model testing_new_table3 {
  Id        Int      @id @default(autoincrement())
  Name      String   @db.VarChar(191)
  CreatedAt DateTime @default(now()) @db.Timestamp(0)
  UpdatedAt DateTime @default(now()) @db.Timestamp(0)
}

enum customerauditlogs_FieldChanged {
  Name
  Email
  UserCountry
}
